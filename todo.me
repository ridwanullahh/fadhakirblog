
# TODO List

## Current Status

1. Home Page (`index.tsx`)
   - Includes `ThemeToggler`, `Search`, and `HomePage` components.
   - Header with links to Posts Archive, various categories, and Admin page.

2. Admin Dashboard (`admin/index.tsx`)
   - Fetches and displays posts.
   - Options to create, edit, and delete posts.

3. Post Management (`admin/posts`)
   - `create.tsx`: Renders `PostForm` for creating new posts.
   - `edit/[id].tsx`: Fetches post data and renders `PostForm` for editing posts.

4. API Endpoints (`api/posts`)
   - `index.ts`: Handles creation of new posts.
   - `[id]/index.ts`: Handles updating of individual posts.
   - `[id]/delete.ts`: Handles deletion of individual posts.

## Next Steps

1. Database, Env and Auth Setup
   - Connect to the Teable.io PostgreSQL database.
   - Use the table(blog_post) for the post related. don't create another table.
   - Create 5 more dummy data record to the table (blog_posts) so we can have more posts to work with
   - Use the provided API methods for any necessary actions.
   - Ensure the entire application works with the db(replace all the simulations with actual interactions and ensure everything works - update all the pages and components as necessary)
   - Create the necessary .env
   - Implement the authentication including necessary page(s) and permissions

2. Frontend Pages(Always commit and push to GitHub repo after each implementations)
   - Most of this have already been implemented - Ensure the following pages are functional and modern and update the db interaction to be actual and enusre they works:
     - Global Theme Toggling
     - Global Ajax Powered Search
     - Home Page
     - Posts Archive with Filtering and Sorting
     - Categories Listing Page
     - Blog Posts Page
     - Minimal Modern Footer with social handles inclusive
     - Mobile-Friendly Menus

3. Admin Area(Always commit to GitHub after each implementations)
   - Ensure the Admin CRUD Area is fully functional with authentication and roles & permissions using Auth0.
   - Implement any missing features in the admin management editor and area.
   - Add notifications toast for all the admin actions response messages.

4. Testing and Validation
   - Ensure all aspects of the project work with the database.
   - Test the application thoroughly to ensure it works perfectly without errors.
   - Fix any errors encountered during testing.

5. Commit and Push
   - Commit and push changes to the GitHub repository after every single change.
